// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using CodeOfChaos.GeneratorTools;

namespace Tests.CodeOfChaos.GeneratorTools.StringBuilders;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class GeneratorStringBuilderTests {
    [Test]
    public async Task Append_ShouldAppendTextWithoutIndent() {
        // Arrange
        var generator = new GeneratorStringBuilder();

        // Act
        generator.Append("Hello");

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo("Hello");
    }

    [Test]
    public async Task AppendLine_ShouldAppendTextWithNewLine() {
        // Arrange
        var generator = new GeneratorStringBuilder();

        // Act
        generator.AppendLine("Hello");

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"Hello{Environment.NewLine}");
    }

    [Test]
    public async Task IndentAndAppend_ShouldIndentTextBasedOnPadding() {
        // Arrange
        var generator = new GeneratorStringBuilder(2);// Padding of 2 spaces per indent level
        
        // Act
        generator.Indent(g => g.AppendLine("Indented Text"));
        
        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"  Indented Text{Environment.NewLine}");
    }

    [Test]
    public async Task MultipleIndentations_ShouldApplyCorrectIndentLevels() {
        // Arrange
        var generator = new GeneratorStringBuilder(2);// Padding of 2 spaces per indent level

        // Act
        generator.Indent(g => 
            g.Indent(g1 => 
                g1.AppendLine("Double Indented Text")
            )
        );

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"    Double Indented Text{Environment.NewLine}");
    }

    [Test]
    public async Task UnIndent_ShouldReduceIndentation() {
        // Arrange
        var generator = new GeneratorStringBuilder(2);

        // Act
        generator.Indent(g => g
            .Indent(_ => {})
            .AppendLine("Text")
        );

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"  Text{Environment.NewLine}");
    }

    [Test]
    public async Task AppendAutoGenerated_ShouldAddGeneratedComment() {
        // Arrange
        var generator = new GeneratorStringBuilder();

        // Act
        generator.AppendAutoGenerated();

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"// <auto-generated />{Environment.NewLine}");
    }

    [Test]
    public async Task AppendUsings_ShouldAddUsingDeclarations() {
        // Arrange
        var generator = new GeneratorStringBuilder();

        // Act
        generator.AppendUsings("System", "System.Text");

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"using System;{Environment.NewLine}using System.Text;{Environment.NewLine}");
    }

    [Test]
    public async Task AppendMutlipleUsings_ShouldAddUsingDeclarations() {
        // Arrange
        var generator = new GeneratorStringBuilder();

        // Act
        generator.AppendMultipleUsings(() => new[] { "System", "System.Text" });

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"using System;{Environment.NewLine}using System.Text;{Environment.NewLine}");
    }

    [Test]
    public async Task Clear_ShouldResetBuilderAndIndentation() {
        // Arrange
        var generator = new GeneratorStringBuilder();
        generator.AppendLine("Hello");
        generator.Indent(_ => {});

        // Act
        generator.Clear();
        generator.Append("New Start");

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo("New Start");
    }

    [Test]
    public async Task ToStringAndClear_ShouldReturnStringAndClear() {
        // Arrange
        var generator = new GeneratorStringBuilder();
        generator.Append("Hello");

        // Act
        string result = generator.ToStringAndClear();

        // Assert
        await Assert.That(result).IsEqualTo("Hello");
        await Assert.That(generator.ToString()).IsEqualTo(string.Empty);
    }

    [Test]
    public async Task IndentLine_ShouldIndentAndAddLine() {
        // Arrange
        var generator = new GeneratorStringBuilder();

        // Act
        generator.AppendLineIndented("Indented Line");

        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"    Indented Line{Environment.NewLine}");
    }

    [Test]
    public async Task IndentAction_ShouldIndentAndExecuteAction() {
        // Arrange
        var generator = new GeneratorStringBuilder();
        
        // Act
        generator.Indent(g => g.AppendLine("Indented Text"));
        
        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"    Indented Text{Environment.NewLine}");
    }

    [Test]
    public async Task IndentAction_ShouldIndentAndExecuteAction_MultipleTimes() {
        // Arrange
        var generator = new GeneratorStringBuilder();
        
        // Act
        generator.Indent(g => g.AppendLine("Indented Text"));
        generator.Indent(g => g
            .AppendLine("Something")
            .Indent(g2 => g2.AppendLine("Else"))
        );
        
        // Assert
        await Assert.That(generator.ToString()).IsEqualTo($"    Indented Text{Environment.NewLine}    Something{Environment.NewLine}        Else{Environment.NewLine}");
    }
    
[Test]
public async Task AppendBody_ShouldIndentAndAppendText() {
    // Arrange
    var generator = new GeneratorStringBuilder();
    generator.AppendLine("Something special");
    
    
    // Act
    generator.Indent(g => g.AppendBody("""
    SomeData
        Something
    """));
    
    // Assert
    await Assert.That(generator.ToString()).IsEqualTo($"Something special{Environment.NewLine}    SomeData{Environment.NewLine}        Something{Environment.NewLine}");
    // equal to:
    // """
    // Something special
    //     SomeData
    //         Something
    // """"
}
}
