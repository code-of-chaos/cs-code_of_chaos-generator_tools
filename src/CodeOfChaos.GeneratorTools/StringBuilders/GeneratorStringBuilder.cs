// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using System.Text;

namespace CodeOfChaos.GeneratorTools;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class GeneratorStringBuilder(int paddingChars = 4) {
    private readonly int _paddingChars = paddingChars > 0 ? paddingChars : 4;
    private readonly StringBuilder _stringBuilder = new();
    private int _indent;
    private int IndentAmount {
        get => _indent;
        set => _indent = value <= 0 ? 0 : value;
    }

    public GeneratorStringBuilder AppendUsings(params string[] usings) {
        foreach (string @using in usings) {
            AppendLine($"using {@using};");
        }

        return this;
    }

    public GeneratorStringBuilder AppendAutoGenerated() => AppendComment("<auto-generated />");
    public GeneratorStringBuilder AppendComment(string comment) => AppendLine($"// {comment}");

    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    #region Append methods(stringbuilder + indent)
    public GeneratorStringBuilder Append() {
        _stringBuilder.Append(IndentString(IndentAmount));
        return this;
    }

    public GeneratorStringBuilder Append(char c) {
        _stringBuilder.Append(IndentString(IndentAmount)).Append(c);
        return this;
    }

    public GeneratorStringBuilder Append(string text) {
        _stringBuilder.Append(IndentString(IndentAmount)).Append(text);
        return this;
    }

    public GeneratorStringBuilder AppendLine() => AppendLine(string.Empty);

    public GeneratorStringBuilder AppendLine(string text) {
        _stringBuilder.Append(IndentString(IndentAmount)).AppendLine(text);
        return this;
    }
    #endregion
    #region Auto Indented methods
    private string IndentString(int amount) => new(' ', amount * _paddingChars);

    public GeneratorStringBuilder UnIndent() {
        IndentAmount--;
        return this;
    }

    public GeneratorStringBuilder UnIndentLine(string text) {
        _stringBuilder.Append(IndentString(--IndentAmount)).AppendLine(text);
        return this;
    }

    public GeneratorStringBuilder Indent() {
        IndentAmount++;
        return this;
    }

    public GeneratorStringBuilder IndentLine(string text) {
        _stringBuilder.Append(IndentString(++IndentAmount)).AppendLine(text);
        return this;
    }
    #endregion
    #region ToString & Clear
    public override string ToString() => _stringBuilder.ToString();

    public string ToStringAndClear() {
        string result = ToString();
        Clear();
        return result;
    }

    public GeneratorStringBuilder Clear() {
        _stringBuilder.Clear();
        IndentAmount = 0;
        return this;
    }
    #endregion
}
